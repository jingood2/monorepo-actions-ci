name: Reusable Lambda CICD Pipeline

on:
  workflow_call:
    inputs:
      aws_account_id:
        required: true
        type: string
      aws_region:
        type: string
        required: false
        default: ap-northeast-2
      app_name:
        type: string
        required: true
      project_root_dir:
        type: string
        required: false
        default: projects
      pipeline_execution_role:
        type: string
        required: false
        default: github-monorepo-actions-ci-role
      artifact_bucket:
        type: string
        required: false
        default: jingood2-s3-dev-content

env:
  CI: "true"
  SAM_TEMPLATE: template.yaml
  TESTING_STACK_NAME: ${ inputs.app_name }-dev
  TESTING_PIPELINE_EXECUTION_ROLE: arn:aws:iam::${{inputs.aws_account_id}}:role/${{inputs.pipeline_execution_role}}
  TESTING_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::${{inputs.aws_account_id}}:role/aws-sam-cli-managed-dev-p-CloudFormationExecutionR-B3VPYQ0FH62F
  APP_DIRECTORY: ${{inputs.project_root_dir}}/${{inputs.app_name}}
  TESTING_ARTIFACTS_BUCKET: ${{inputs.artifact_bucket}}
  AWS_REGION: ${{inputs.aws_region}}
  # If there are functions with "Image" PackageType in your template,
  # uncomment the line below and add "--image-repository ${TESTING_IMAGE_REPOSITORY}" to
  # testing "sam package" and "sam deploy" commands.
  # TESTING_IMAGE_REPOSITORY = '0123456789.dkr.ecr.region.amazonaws.com/repository-name'

jobs:
  test:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0
      ################################
      # Run Linter against code base #
      ################################
      #- name: Lint Code Base
      #  uses: github/super-linter@v4
      #  env:
      #    VALIDATE_ALL_CODEBASE: false
      #    DEFAULT_BRANCH:  feat-test
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  delete-feature:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: aws-actions/setup-sam@v1

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-region: ${{ inputs.aws_region }}
          role-to-assume: arn:aws:iam::${{inputs.aws_account_id}}:role/${{inputs.pipeline_execution_role}}
          role-session-name: testing-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Delete feature branch stack
        run: |
          cd $(echo ${{env.APP_DIRECTORY}})
          sam delete \
            --stack-name $(echo ${GITHUB_REF##*/} | tr -cd '[a-zA-Z0-9-]') \
            --region $(echo ${{env.AWS_REGION}}) \
            --no-prompts

  build-and-deploy-feature:
    # this stage is triggered only for feature branches (feature*),
    # which will build the stack and deploy to a stack named with branch name.
    if: startsWith(github.ref, 'refs/heads/feat')
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      APP_DIR: ${inputs.app_name}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - name: Set the working directory
        run: |-
          WORKING_DIR="${{inputs.app_name}}"
          echo "WORKING_DIR=projects/${WORKING_DIR}" >> $GITHUB_ENV
      - uses: aws-actions/setup-sam@v1
      - run: |-
          cd $(echo ${{env.APP_DIRECTORY}})
          sam build --template ${SAM_TEMPLATE} --use-container

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-region: ${{ inputs.aws_region }}
          role-to-assume: arn:aws:iam::${{inputs.aws_account_id}}:role/${{inputs.pipeline_execution_role}}
          role-session-name: feature-deployment
          role-duration-seconds: 3600

      - name: Deploy to feature stack in the testing account
        shell: bash
        run: |-
          echo running on brach ${GITHUB_REF##*/}
          cd $(echo ${{env.APP_DIRECTORY}})
          sam deploy --stack-name $(echo ${GITHUB_REF##*/} | tr -cd '[a-zA-Z0-9-]') \
            --capabilities CAPABILITY_IAM \
            --region $(echo ${{env.AWS_REGION}}) \
            --s3-bucket $(echo ${{env.TESTING_ARTIFACTS_BUCKET}}) \
            --no-fail-on-empty-changeset \
            --role-arn $(echo ${{env.TESTING_CLOUDFORMATION_EXECUTION_ROLE}})

  build-and-package:
    if: github.ref == 'refs/heads/main'
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
      - uses: aws-actions/setup-sam@v1

      - name: Build resources
        run: |-
          cd ${env.APP_DIRECTORY}
          sam build --template ${SAM_TEMPLATE} --use-container

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: testing-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Upload artifacts to testing artifact buckets
        run: |
          cd ${env.APP_DIRECTORY}
          sam package \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
            --region ${TESTING_REGION} \
            --output-template-file packaged-testing.yaml

      - uses: actions/upload-artifact@v2
        with:
          name: packaged-testing.yaml
          path: projects/{{ROUTE}}/packaged-testing.yaml

      - name: Assume the prod pipeline user role
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.PROD_REGION }}
          role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
          role-session-name: prod-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Upload artifacts to production artifact buckets
        run: |
          cd projects/{{ROUTE}}
          sam package \
            --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
            --region ${PROD_REGION} \
            --output-template-file packaged-prod.yaml

      - uses: actions/upload-artifact@v2
        with:
          name: packaged-prod.yaml
          path: projects/{{ROUTE}}/packaged-prod.yaml

  deploy-testing:
    if: github.ref == 'refs/heads/main'
    needs: [build-and-package]
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: aws-actions/setup-sam@v1
      - uses: actions/download-artifact@v2
        with:
          name: packaged-testing.yaml

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: testing-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to testing account
        run: |
          sam deploy --stack-name ${TESTING_STACK_NAME} \
            --template packaged-testing.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${TESTING_REGION} \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
            --no-fail-on-empty-changeset \
            --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE}

  integration-test:
    if: github.ref == 'refs/heads/main'
    needs: [deploy-testing]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          # trigger the integration tests here

  deploy-prod:
    if: github.ref == 'refs/heads/main'
    needs: [integration-test]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    # Configure GitHub Action Environment to have a manual approval step before deployment to production
    # https://docs.github.com/en/actions/reference/environments
    # environment: <configured-environment>
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: aws-actions/setup-sam@v1
      - uses: actions/download-artifact@v2
        with:
          name: packaged-prod.yaml 

      - name: Assume the prod pipeline user role
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.PROD_REGION }}
          role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
          role-session-name: prod-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to production account
        run: |
          sam deploy --stack-name ${PROD_STACK_NAME} \
            --template packaged-prod.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${PROD_REGION} \
            --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
            --no-fail-on-empty-changeset \
            --role-arn ${PROD_CLOUDFORMATION_EXECUTION_ROLE}
